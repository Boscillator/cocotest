from .util import *

def main():
    """Executes Tests."""
    assert r"hello, world" == "hello, world" == "hello," " " "world"
    assert {"a":5}["a"] == 5
    assert 1 `plus` 1 == 2
    assert 3 `mod` 6 == 3
    assert 5 `mod` 4 == 1
    assert "11" `base` 2 == 3 == 11_2
    assert 10A_12 == 154 == int("10A", 12)
    assert {"a", 5} |> len == 2
    assert 5 |> (-)$(2) |> (*)$(2) == -6
    assert range(1, 5) |> prod == 24
    assert plus1(2) == 3
    assert sqrt(4) == 2
    assert square(3) == 9
    assert plus1sq(3) == 16 == plus1sq_(3)
    assert sqplus1(3) == 10 == sqplus1_(3)
    assert 3 |> plus1 |> square == 16
    assert sum_([1,7,3,5]) == 16
    assert (add([1,2,3], [10,20,30]) |> list
            == [11,22,33]
            == zipsum([1,2,3], [10,20,30]) |> list
            )
    assert clean("   ab cd ef   ") == "ab cd ef"
    for qsort in [qsort1, qsort2, qsort3, qsort4, qsort5]:
        last = 0
        for x in qsort(rand_list(10)):
            assert x >= last
            last = x
    assert repeat(3)$[2] == 3
    assert sum_(repeat(1)$[:5]) == 5
    assert (sum_(takewhile((x)-> x<5, N()))
            == 10
            == dropwhile((>)$(0), (range(-10, 0) :: N()))$[:5] |> sum
            )
    assert "ABCDEFG" |> itemgetter(1, 3, 5) |> concatsum == "BDF"
    assert map(pow$(2), range(0, 5)) |> list == [1,2,4,8,16]
    assert N()$[10:15] |> list == [10,11,12,13,14]
    assert (N() |> takewhile$((>)$(5)) |> list
            == [0,1,2,3,4]
            == range(0,10)$[:5:] |> list
            )
    assert (range(-10, 0) :: N())$[5:15] |> sum == -5
    assert add(repeat(1), N())$[:5] |> list == [1,2,3,4,5]
    assert sum(N()$[5:]$[:5]) == 35
    assert ([$]$(N()))(5, 10) |> list == [5,6,7,8,9]
    assert 12 |> next_mul_of $(5) == 15
    assert collatz(27)
    assert preop(1, 2).add() == 3
    assert vector(3, 4) |> abs == 5
    assert vector(1, 2) |> attrgetter("x", "y") == (1, 2)
    assert vector(3, 1) |> vector(1, 2).transform |> itemgetter(0, 1) == (4, 3)
    assert triangle(3, 4, 5).is_right()
    assert factorial1(3) == 6 == factorial2(3)
    assert factorial1(-1) is None is factorial2(-1)
    assert factorial3([2,3]) == [2,6]
    assert classify(()) == "empty tuple"
    assert classify([]) == "empty list"
    assert classify((1,)) == "singleton tuple"
    assert classify([1,1]) == "duplicate pair list of 1"
    assert classify((1,2)) == "pair tuple"
    assert classify([1,2,3]) == "list"
    assert classify((1,1,1)) == "tuple"
    assert classify({0}) == "set of 0" == classify(frozenset({0}))
    assert classify({0,1}) == "set" == classify(frozenset({1}))
    assert dictpoint({"x":1, "y":2}) == (1,2)
    assert -4 == neg_square_u(2) â‰  4 âˆ§ 0 â‰¤ neg_square_u(0) â‰¤ 0
    iter1 = range(0,10)
    iter1, iter2 = tee(iter1)
    assert iter1$[2:8] |> list == iter2$[2:8] |> list
