from .util import *

def main(doc):
    """Executes Tests."""
    assert __coconut__
    assert __coconut_version__
    assert "__coconut__" in globals()
    assert "__coconut__" not in locals()
    assert doc is not None
    assert r"hello, world" == "hello, world" == "hello," " " "world"
    assert {"a":5}["a"] == 5
    olist = [0,1,2]
    olist[1] += 4
    assert olist == [0,5,2]
    assert +5e+5 == +5 * +10**+5
    assert 1 `plus` 1 == 2 == 1 `(+)` 1
    assert "1" `plus` "1" == "11" == "1" `(+)` "1"
    assert 3 `mod` 6 == 3 == 3 `(%)` 6
    assert 5 `mod` 4 == 1 == 5 `(%)` 4
    assert "11" `base` 2 == 3 == 2_11
    assert 12_10A == 154 ==  "10A" `int` 12
    assert ["1", "2"] `join_with` ", " == "1, 2"
    assert ["a","b","c"] `join_with` == "abc"
    assert {"a", 5} |> len == 2
    assert 5 |> (-)$(2) |> (*)$(2) == -6
    assert 1 `range` 5 |> prod == 24
    assert 2 `plus1` == 3
    assert `sqrt` 16 == 4 == `sqrt_` 16
    assert `square` 3 == 9
    assert 3 `plus1sq` == 16 == 3 `plus1sq_`
    assert 3 `sqplus1` == 10 == 3 `sqplus1_`
    assert 3 |> plus1 |> square == 16
    assert reduce((|>), [3, plus1, square]) == 16 == pipe(pipe(3, plus1), square)
    assert reduce((..), [sqrt, square, plus1])(3) == 4 == compose(compose(sqrt, square), plus1)(3)
    assert sum_([1,7,3,5]) == 16
    assert (add([1,2,3], [10,20,30]) |> list
            == [11,22,33]
            == zipsum([1,2,3], [10,20,30]) |> list
            )
    assert clean("   ab cd ef   ") == "ab cd ef" == "   ab cd ef   " |> clean
    for qsort in [qsort1, qsort2, qsort3, qsort4, qsort5]:
        last = 0
        for x in qsort(rand_list(10)):
            assert x >= last
            last = x
    assert repeat(3)$[2] == 3 == repeat_(3)$[2]
    assert sum_(repeat(1)$[:5]) == 5 == sum_(repeat_(1)$[:5])
    assert (sum_(takewhile((x)-> x<5, N()))
            == 10
            == dropwhile((>)$(0), (range(-10, 0) :: N()))$[:5] |> sum
            )
    assert "ABCDEFG" |> itemgetter(1, 3, 5) |> sum_ == "BDF"
    assert map(pow$(2), 0 `range` 5) |> list == [1,2,4,8,16]
    assert N()$[10:15] |> list == [10,11,12,13,14] == N_()$[10:15] |> list
    assert (N() |> takewhile$((>)$(5)) |> list
            == [0,1,2,3,4]
            == range(0,10)$[:5:] |> list
            )
    assert (range(-10, 0) :: N())$[5:15] |> sum == -5 == chain(range(-10, 0), N())$[5:15] |> sum
    assert add(repeat(1), N())$[:5] |> list == [1,2,3,4,5] == add(repeat(1), N_())$[:5] |> list
    assert sum(N()$[5:]$[:5]) == 35 == sum(N_()$[5:]$[:5])
    assert N()$[](slice(5, 10)) |> list == [5,6,7,8,9] == list(range(0, 15))[](slice(5, 10))
    assert preN(range(-5, 0))$[1:10] |> list == [-4,-3,-2,-1,0,1,2,3,4]
    assert map_iter((*)$(2), N())$[:5] |> list == [0,2,4,6,8]
    assert N()$[:100] |> tuple == N_()$[:100] |> tuple == N__()$[:100] |> tuple
    assert 12 |> next_mul_of $(5) == 15
    assert collatz(27)
    assert preop(1, 2).add() == 3
    assert vector(3, 4) |> abs == 5
    assert vector(1, 2) |> attrgetter("x", "y") == (1, 2)
    assert vector(3, 1) |> vector(1, 2).transform |> itemgetter(0, 1) == (4, 3)
    assert vector(1, 2) |> vector(1, 2).__eq__
    assert not vector(1, 2) |> vector(3, 4).__eq__
    assert not (1, 2) |> vector(1, 2).__eq__
    assert triangle(3, 4, 5).is_right()
    assert (.)(triangle(3, 4, 5), "is_right")
    assert factorial1(3) == 6
    assert factorial2(3) == 6
    assert factorial4(3) == 6
    assert factorial5(3) == 6
    assert factorial1(-1) is None
    assert factorial2(-1) is None
    assert factorial4(-1) is None
    assert factorial5(-1) is None
    assert factorial3([2,3]) == [2,6] == factorial3((2,3))
    assert classify(()) == "empty tuple"
    assert classify([]) == "empty list"
    assert classify((1,)) == "singleton tuple"
    assert classify([1,1]) == "duplicate pair list of 1"
    assert classify((1,2)) == "pair tuple"
    assert classify([1,2,3]) == "list"
    assert classify((1,1,1)) == "tuple"
    assert classify({}) == "empty dict"
    assert classify({"a":1}) == "dict"
    assert classify({0}) == "set of 0" == classify(f{0})
    assert classify({0,1}) == "set" == classify(f{1})
    assert classify(s{}) == "empty set" == classify(f{})
    assert classify_sequence(()) == "empty"
    assert classify_sequence((1,)) == "singleton"
    assert classify_sequence((1, 1)) == "duplicate pair of 1"
    assert classify_sequence((1, 2)) == "pair"
    assert classify_sequence((1, 2, 3)) == "few"
    assert dictpoint({"x":1, "y":2}) == (1,2)
    assert dictpoint_({"x":1, "y":2}) == (1,2) == dictpoint__({"x":1, "y":2})
    assert map_((+)$(1), []) == []
    assert map_((+)$(1), ()) == ()
    assert map_((+)$(1), [0,1,2,3]) == [1,2,3,4]
    assert map_((+)$(1), (0,1,2,3)) == (1,2,3,4)
    assert duplicate_first1([1,2,3]) == [1,1,2,3] == duplicate_first2([1,2,3]) |> list
    assert one_to_five([1,2,3,4,5]) == [2,3,4]
    assert not one_to_five([0,1,2,3,4,5])
    assert one_to_five([1,5]) == []
    assert -4 == neg_square_u(2) ≠ 4 ∧ 0 ≤ neg_square_u(0) ≤ 0
    iter1 = range(0,10)
    iter1, iter2 = tee(iter1)
    assert iter1$[2:8] |> list == iter2$[2:8] |> list
    \data = 5
    assert \data == 5
    \\def backslash_test():
        return (x) -> x
    assert \(1) == 1 == backslash_test()(1)
    assert \("hello") == "hello" == \('hello')
    \\def multiline_backslash_test(
                                   x,
                                   y):
        return x + y
    assert multiline_backslash_test(1, 2) == 3
    \\ assert True
    class one_line_class: pass
    assert isinstance(one_line_class(), one_line_class)
    assert is_null(null1())
    assert is_null(null2())
    assert empty() |> depth == 0
    assert leaf(5) |> depth == 1
    assert node(leaf(2), node(empty(), leaf(3))) |> depth == 3
    assert maybes(5, square, plus1) == 26
    assert maybes(None, square, plus1) is None
    assert square <| 2 == 4
    assert (5, 3) |*> mod == 2 == mod <*| (5, 3)
    assert Just(5) <| square <| plus1 == Just(26)
    assert Nothing() <| square <| plus1 == Nothing()
    assert head_tail([1,2,3]) == (1, [2,3])
    assert init_last([1,2,3]) == ([1,2], 3)
    assert last_two([1,2,3]) == (2, 3) == last_two_([1,2,3])
    assert expl_ident(5) == 5
    assert "" |> .join <| ["1","2","3"] == "123" == "". <| "join" <| ["1","2","3"]
    assert mod$ <| 5 <| 3 == 2 == (%)$ <| 5 <| 3
    assert 1 |> [1,2,3][] == 2 == 1 |> [1,2,3]$[]
    assert 1 |> "123"[] == "2" == 1 |> "123"$[]
    assert 5 |> dectest == 5
    try:
        raise ValueError()
    except TypeError, ValueError as err:
        assert err
    else:
        assert False
    assert delist2([1, 2]) == (1, 2) == delist2_([1, 2])
    assert tuple1(1) == (1,) == tuple1_(1)
    assert tuple2(1, 2) == (1, 2) == tuple2_(1, 2)
    assert htsplit([1,2,3]) == [1,[2,3]] == htsplit_([1,2,3])
    assert iadd(1, 2) == 3 == iadd_(1, 2)
    assert strmul("a", 3) == "aaa" == strmul_("a", 3)
    try:
        strmul("a", "b")
    except MatchError as err:
        assert err.pattern == "match def strmul(a is str, x is int):"
        assert err.value == ("a", "b")
    else:
        assert False
    assert (| -1, 0, |) :: range(1, 5) |> list == [-1, 0, 1, 2, 3, 4]
    assert (| 1 |) :: (| 2 |) |> list == [1, 2]
    laz = lazy()
    assert not laz.done
    lazl = laz.list()
    assert lazl$[:3] |> list == [1, 2, 3]
    assert not laz.done
    assert lazl |> list == [None]
    assert laz.done
    assert is_empty(iter(()))
    assert is_empty(())
    assert not is_empty([1])
    assert is_one(iter([1]))
    assert not is_one(iter(()))
    assert not is_one([])
    assert is_one([1])
    assert not isinstance(map((+)$(2), [1,2,3]), list)
    assert not isinstance(range(10), list)
    assert isinstance(10**100, int)
    assert chr(1000)
    assert 3 + 4i |> abs == 5
    assert 3.14j == 3.14i
    assert 10.j == 10.i
    assert 10j == 10i
    assert .001j == .001i
    assert 1e100j == 1e100i
    assert 3.14e-10j == 3.14e-10i
